import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {

	/*
    class Node 
    	int data;
    	Node left;
    	Node right;
	*/
	public static int height(Node root) {
      	// Write your code here.
       if(root == null) {
           return 0;
       }

       Node left = root.left;
       Node right = root.right;
       
       int leftcount = 0;
       if(left != null) {
            leftcount = checkTwoLevels(left, leftcount);
       }

       int rightcount = 0;
       if(right != null) {
           rightcount = checkTwoLevels(right, rightcount);
       }

       return leftcount >= rightcount ? leftcount : rightcount;
    }

    private static int checkTwoLevels(Node currentRoot, int counter) {
        if(currentRoot != null) {
            counter++;   
        } else {
            return counter;
        }
        
        Node currentRootLeft = currentRoot.left;
        Node currentRootRight = currentRoot.right;
        if(currentRootLeft != null && currentRootRight != null) {

            int counterone = checkTwoLevels(currentRootLeft, counter);
            int countertwo = checkTwoLevels(currentRootRight, counter);
            
            return counterone >= countertwo ? counterone : countertwo;
        } else if(currentRootLeft != null || currentRootRight != null) {
            if(currentRootLeft != null) {
                return checkTwoLevels(currentRootLeft, counter);
            } else {
                return checkTwoLevels(currentRootRight, counter);
            }
        } else {
            return counter;
        }

    }

	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        int height = height(root);
        System.out.println(height);
    }	
}
